{"parallel":false,"source_files":[{"coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,375,375,375,405,405,405,405,30,30,30,null,null,null,null,null,0,0,0,4,4,4,4,4,0,1,1,1,1,null,null,null,1,94,13,27,24,13,72,63,49,11,23,24,3,1,63,31,31,59,45,45,45,45,14,13,14,null,null,null,null,null,null,null,null,null,null,20,10,10,10,10,10,10,10,null,null,null,null,null,null,0,37,20,17,18,18,18,21,29,9,23,20,72,58,47,155,105,44,52,129,127,106,93,42,79,141,76,82,119,64,100,200,70,67,108,107,68,78,53,220,115,6,88,136,107,117,70,59,50,20,49,8,8,27,12,12,4,2,4,0,15,11,2,15,20,24,16,12,12,18,9,9,1,0,3,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,62,107,110,128,52,20,20,11,16,2,17,18,17,1,1,16,1,0,1,29,2,3,12,12,27,20,82,70,77,55,141,142,103,71,62,80,49,56,22,49,83,39,28,30,89,8,5,37,68,0,2,29,17,12,9,39,172,177,60,200,190,27,11,4,6,5,8,4,2,5,5,4,0,6,2,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"source":";;; bazel-transient.el --- Transient command dispatch for Bazel projects -*- lexical-binding: t -*-\n\n;; Copyright Â© 2020 Jonathan Jin <me@jonathanj.in>\n\n;; Author: Jonathan Jin <me@jonathanj.in>\n;; URL: https://github.com/jinnovation/bazel-transient\n;; Keywords: project, convenience, build\n;; Version: 0.0.1\n;; Package-Requires: ((emacs \"25.1\") (pkg-info \"0.6\") (ht \"2.2\") (transient \"0.2.0\") (s \"1.12.0\") (dash \"2.16.0\"))\n\n;; This file is NOT part of GNU Emacs.\n\n;; This program is free software; you can redistribute it and/or modify\n;; it under the terms of the GNU General Public License as published by\n;; the Free Software Foundation; either version 3, or (at your option)\n;; any later version.\n;;\n;; This program is distributed in the hope that it will be useful,\n;; but WITHOUT ANY WARRANTY; without even the implied warranty of\n;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n;; GNU General Public License for more details.\n;;\n;; You should have received a copy of the GNU General Public License\n;; along with GNU Emacs; see the file COPYING.  If not, write to the\n;; Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,\n;; Boston, MA 02110-1301, USA.\n\n;;; Commentary:\n;;\n;; Provides a transient command for testing of Bazel-based projects.\n;;\n;;; Code:\n\n(require 'dash)\n(require 'ht)\n(require 'transient)\n(require 's)\n(require 'subr-x)\n\n(defcustom bazel-transient-bazel-cmd\n  \"bazel\"\n  \"Command to run Bazel with.\"\n  :group 'bazel-transient\n  :type 'string)\n\n(defcustom bazel-transient-completion-system\n  'default\n  \"Completion system to use.\"\n  :group 'bazel-transient\n  :options '(default\n              ivy)\n  :type 'symbol)\n\n(defcustom bazel-transient-enable-caching\n  nil\n  \"Whether or not to enable caching for Bazel operations.\"\n  :group 'bazel-transient\n  :type 'bool)\n\n(defcustom bazel-transient-cache-file\n  (expand-file-name \"bazel-transient-targets.cache\" user-emacs-directory)\n  \"The name of the Bazel-Transient test target cache file.\"\n  :group 'bazel-transient\n  :type 'file)\n\n(defvar bazel-transient-kind-target-cache\n  (ht)\n  \"A hashmap used to cache project targets by kind.\")\n\n(defconst bazel-transient-workspace-file-name \"WORKSPACE\"\n  \"The file name used to identify the root of a Bazel project.\")\n\n;; FIXME: Copied wholesale from magit-utils.el. Upstream a PR to\n;; transient that decouples this from magit.\n(defmacro bazel-transient-read-char-case (prompt verbose &rest clauses)\n  \"TODO: Documentation.  PROMPT VERBOSE CLAUSES.\"\n  (declare (indent 2)\n           (debug (form form &rest (characterp form body))))\n  `(prog1 (pcase (read-char-choice\n                  (concat ,prompt\n                          ,(concat (mapconcat 'cadr clauses \", \")\n                                   (and verbose \", or [C-g] to abort\") \" \"))\n                  ',(mapcar 'car clauses))\n            ,@(--map `(,(car it) ,@(cddr it)) clauses))\n     (message \"\")))\n\n(defun bazel-transient-bazel-command-to-string-maybe (cmd args &optional target)\n  \"Execute a Bazel command CMD with ARGS and optional\n  TARGET. Return the result as a string if successful.\n\nTARGET is provided primarily for semantic convenience.  Passing\nthe corresponding value in as the last value of the ARGS list\nresults in equivalent behavior.\n\nIf `bazel-transient-bazel-cmd' is not an actual executable, error\nout.\"\n  (bazel-transient-shell-command-to-string-maybe\n   (s-join \" \" (-flatten `(,bazel-transient-bazel-cmd\n                           ,(symbol-name cmd)\n                           ,args\n                           ,target\n                           ;; FIXME: Really need to have a package-internal\n                           ;; .bazelrc to use across all cmd invocations to\n                           ;; avoid users' configs getting in the way like this\n                           \"--color=no\"\n                           \"--noshow_progress\"\n                           ;; FIXME: The | cat is a horrid hack to get around\n                           ;; dazel (https://github.com/nadirizr/dazel)\n                           ;; detecting sub-processes calling out to dazel from\n                           ;; within Emacs as running inside a tty, leading to\n                           ;; \"not a tty\" errors. This might only be an issue w/\n                           ;; NVIDIA's internal Dazel, but who knows.\n                           \"| cat\")))))\n\n(defun bazel-transient-bazel-do (cmd args &optional target)\n  \"Execute a Bazel command CMD with ARGS and optional TARGET.\n\nTARGET is provided primarily for semantic convenience.  Passing\nthe corresponding value in as the last value of the ARGS list\nresults in equivalent behavior.\n\nIf `bazel-transient-bazel-cmd' is not an actual executable, error\nout.\"\n  (if-let* ((bazel-cmd (executable-find bazel-transient-bazel-cmd))\n            (total-cmd (s-join \" \"\n                               (-flatten `(,bazel-cmd\n                                           ,(symbol-name cmd)\n                                           ,args\n                                           ,target)))))\n      (compile total-cmd)\n    (error \"`%s' not found\" bazel-transient-bazel-cmd)))\n\n(transient-define-infix bazel-test-test-output ()\n  :class 'transient-option\n  :description \"Test output style\"\n  :key \"-o\"\n  :argument \"--test_output=\"\n  :reader (lambda (&rest _ignore)\n            (bazel-transient-read-char-case nil t\n              (?u \"s[u]mmary\" \"summary\")\n              (?e \"[e]rrors\" \"errors\")\n              (?a \"[a]ll\" \"all\")\n              (?t \"s[t]reamed\" \"streamed\"))))\n\n(transient-define-infix bazel-test-test-filter ()\n  :description \"Test filter\"\n  :class 'transient-option\n  :argument \"--test_filter=\"\n  :key \"-f\"\n  :reader 'completing-read)\n\n(transient-define-infix bazel-test-test-summary ()\n  :description \"Test summary style\"\n  :class 'transient-option\n  :key \"-s\"\n  :argument \"--test_summary=\"\n  :reader (lambda (&rest _ignore)\n            (bazel-transient-read-char-case nil t\n              (?s \"[s]hort\" \"short\")\n              (?t \"[t]erse\" \"terse\")\n              (?d \"[d]etailed\" \"detailed\")\n              (?n \"[n]one\" \"none\"))))\n\n(transient-define-infix bazel-test-cache-test-results ()\n  :description \"Cache test results\"\n  :class 'transient-option\n  :argument \"--cache_test_results=\"\n  :key \"-c\"\n  :reader (lambda (&rest _ignore)\n            (bazel-transient-read-char-case nil t\n              (?y \"[y]es\" \"yes\")\n              (?n \"[n]o\" \"no\")\n              (?a \"[a]uto\" \"auto\"))))\n\n(transient-define-infix bazel-test-test-timeout ()\n  :description \"Timeout\"\n  :class 'transient-option\n  :argument \"--test_timeout=\"\n  :key \"-t\"\n  :reader 'transient-read-number-N+)\n\n(defun bazel-transient-get-all-workspace-targets-of-kind (kind)\n  \"Get all targets in the current workspace of KIND.\"\n  (if-let ((caching-p bazel-transient-enable-caching)\n           (cached-targets (gethash kind bazel-transient-kind-target-cache)))\n      cached-targets\n    (if-let* ((output (bazel-transient-bazel-command-to-string-maybe\n                       'query\n                       (s-lex-format \"\\\"kind(${kind}, //...)\\\"\"))))\n        (bazel-transient-cache-targets-maybe kind (s-lines output))\n      (error \"Get workspace targets failed\"))))\n\n(defun bazel-transient-cache-targets-maybe (kind results)\n  \"Conditionally cache RESULTS under the kind KIND.\n\nIf `bazel-test-cache-test-results' is nil, simply return\nRESULTS.  Otherwise, cache and return RESULTS.\"\n  (if (not bazel-transient-enable-caching)\n      results\n    ;; FIXME: Note that this won't work across multiple projects. Need a way to\n    ;; define a project ROOT, e.g. optionally using Projectile.\n    (puthash kind results bazel-transient-kind-target-cache)\n    (bazel-transient-serialize-kind-target-cache)\n    results))\n\n(defun bazel-transient-invalidate-cache-maybe ()\n  \"Invalidate the cache if `bazel-transient-enable-caching' is non-nil.\"\n  (interactive)\n  (when bazel-transient-enable-caching\n    (setq bazel-transient-kind-target-cache (ht))\n    (if bazel-transient-enable-caching (bazel-transient-serialize-kind-target-cache))))\n\n(defun bazel-transient-completing-read (prompt choices)\n  \"Present PROMPT with CHOICES based on `bazel-transient-completion-system'.\"\n  (cond\n   ((eq bazel-transient-completion-system 'default)\n    (completing-read prompt choices))\n   ((eq bazel-transient-completion-system 'ivy)\n    (if (fboundp 'ivy-read)\n        (ivy-read prompt choices)\n      (user-error \"Ivy selected, but not installed.  Please install\")))\n   (t (funcall bazel-transient-completion-system prompt choices))))\n\n;; FIXME: Documentation\n(defun bazel-test-target (target args)\n  \"Test the argument TARGET using `bazel-transient-bazel-cmd'.  ARGS are forwarded.\"\n  (interactive\n   (list\n    (bazel-transient-completing-read\n     \"Test target: \"\n     (bazel-transient-get-all-workspace-targets-of-kind 'test))\n    (transient-args 'bazel-test)))\n  (bazel-transient-bazel-do 'test args target))\n\n(defun bazel-transient-get-buffer-pkg-label (&optional buffer)\n  \"Gets the label of the package that the file BUFFER is visiting belongs to.\"\n  ;; FIXME: Interactively select buffer from those available\n  (if-let* ((b (or buffer (current-buffer)))\n            (buffer-relpath (s-concat \"./\"\n                                      (url-file-nondirectory (buffer-file-name b))))\n            (buffer-label (bazel-transient-bazel-command-to-string-maybe\n                           'query\n                           '(\"--output label\")\n                           buffer-relpath)))\n      (car (s-split \":\" buffer-label))\n    (error \"Failed to get buffer's package label\")))\n\n(defun bazel-transient-shell-command-to-string-maybe (cmd)\n  \"Return the output of CMD only if it successfully executes.\"\n  (let* ((exit-code -1)\n         (output (s-trim-right (with-output-to-string\n                                 (with-current-buffer standard-output\n                                   (setq exit-code (call-process-shell-command cmd nil t nil)))))))\n    (when (zerop exit-code) output)))\n\n(defun bazel-transient-test-all-in-current-package (args)\n  \"Execute all test targets in the current package.\n\nARGS is forwarded to Bazel as test command flags.\"\n  (interactive (list (transient-args 'bazel-test)))\n  (bazel-transient-bazel-do 'test args (s-append \":all\" (bazel-transient-get-buffer-pkg-label))))\n\n(transient-define-prefix bazel-test ()\n  \"Test a target.\"\n  [\"Variables\"\n   (bazel-test-cache-test-results)\n   (bazel-test-test-output)\n   (bazel-test-test-filter)\n   (bazel-test-test-summary)\n   (bazel-test-test-timeout)]\n  [[\n    \"Test\"\n    (\"t\" \"target\" bazel-test-target)\n    (\"c\" \"all in current pkg\" bazel-transient-test-all-in-current-package)\n    ]])\n\n;; Credit to bbatsov's projectile-serialize\n(defun bazel-transient-serialize (data filename)\n  \"Serialize DATA to FILENAME.\"\n  (when (file-writable-p filename)\n    (with-temp-file filename\n      (insert (let (print-length) (prin1-to-string data))))))\n\n;; Credit to bbatsov's projectile-unserialize\n(defun bazel-transient-unserialize (filename)\n  \"Read data serialized by `bazel-transient-serialize' in FILENAME.\"\n  (with-demoted-errors\n      \"Error during file deserialization: %S\"\n    (when (file-exists-p filename)\n      (with-temp-buffer\n        (insert-file-contents filename)\n        ;; this will blow up if the contents of the file aren't\n        ;; lisp data structures\n        (read (buffer-string))))))\n\n(defun bazel-transient-serialize-kind-target-cache ()\n  \"Serializes the test cache to the hard drive.\"\n  (bazel-transient-serialize bazel-transient-kind-target-cache bazel-transient-cache-file))\n\n(defun bazel-transient-workspace-root (&optional filename)\n  \"Return the root of the workspace FILENAME belongs to.\n\nIf FILENAME is not provided, use the file of the current buffer.\"\n  ;; TODO: Cache this value\n  (f-traverse-upwards\n   (lambda (path) (let ((workspace-file (f-join path bazel-transient-workspace-file-name)))\n                    (and (file-exists-p workspace-file)\n                              (not (f-directory-p workspace-file)))))\n   (or filename (buffer-file-name (current-buffer)))))\n\n(define-minor-mode bazel-transient-mode\n  \"Minor mode to enable transient command dispatch for Bazel projects.\"\n  :group 'bazel-transient\n  (unless bazel-transient-kind-target-cache\n    (setq bazel-transient-kind-target-cache\n          (or (bazel-transient-unserialize bazel-transient-cache-file)\n              (ht)))))\n\n(provide 'bazel-transient)\n\n;;; bazel-transient.el ends here\n","name":"bazel-transient.el"}],"git":{"head":{"message":"Fill out tests for shell-command-to-string-maybe","committer_email":"jjin082693@gmail.com","committer_name":"Jonathan Jin","author_email":"jjin082693@gmail.com","author_name":"Jonathan Jin","id":"896ce84c7dbc6092a9f8ab882b4a7c418809543d"},"remotes":[{"url":"git@github.com:jinnovation/bazel-transient.git","name":"origin"}],"branch":"master"}}
